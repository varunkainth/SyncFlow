generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String?
  isActive       Boolean   @default(true)
  roles          UserRole[]
  profile        Profile?
  sessions       Session[]
  auditLogs      AuditLog[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Security Fields
  failedAttempts Int       @default(0)
  isLocked       Boolean   @default(false)
  lastLoginAt    DateTime?

  // 2FA (Enforced for Admins)
  twoFactorSettings TwoFactorSettings?
}

model TwoFactorSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailEnabled      Boolean  @default(false)  
  emailCode         String?  // Last sent email OTP (hashed)

  otpEnabled        Boolean  @default(false)  
  otpSecret         String?  

  authAppEnabled    Boolean  @default(false)  
  authAppSecret     String?  

  backupCodes       String[] // Backup recovery codes (hashed)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName String?
  lastName  String?
  avatarUrl String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String         @id @default(uuid())
  name        String         @unique
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Permission {
  id          String         @id @default(uuid())
  name        String         @unique
  roles       RolePermission[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedBy String?  // Store who assigned the role
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  action    String
  details   String?
  ipAddress String?
  createdAt DateTime @default(now())
}
