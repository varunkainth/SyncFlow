generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  failedAttempts    Int                @default(0)
  isActive          Boolean            @default(true)
  isLocked          Boolean            @default(false)
  phone             String
  lastLoginAt       DateTime?
  password          String
  isEmailVerified   Boolean            @default(false)
  isPhoneVerified   Boolean            @default(false)
  deletedAt         DateTime?
  username          String?
  auditLogs         AuditLog[]
  profile           Profile?
  sessions          Session[]
  twoFactorSettings TwoFactorSettings?
  roles             UserRole[]

  @@index([email])
}

model TwoFactorSettings {
  id             String   @id @default(uuid())
  userId         String   @unique
  emailEnabled   Boolean  @default(false)
  emailCode      String?
  otpEnabled     Boolean  @default(false)
  otpSecret      String?
  authAppEnabled Boolean  @default(false)
  authAppSecret  String?
  authAppSecretUrl String? 
  backupCodes    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  avatarUrl String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gender    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id        String           @id @default(uuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  roles     RolePermission[]
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedBy String?
  createdAt  DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  details   String?
  ipAddress String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}
